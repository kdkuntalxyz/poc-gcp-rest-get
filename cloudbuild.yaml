steps:
  - id: "Lint"
    name: maven:3-openjdk-17
    args: [ "mvn", "compile" ]

  #  - id: "Run Unit Tests"
  #    name: maven:3-openjdk-17
  #    args: ["mvn", "test"]

  # Setup resources for system tests
  - id: "Build Container Image"
    name: "gcr.io/k8s-skaffold/pack"
    entrypoint: pack
    args:
      - build
      - "$_GCR_HOSTNAME/$PROJECT_ID/$_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA" # Tag docker image with git commit SHA
      - "--builder=gcr.io/buildpacks/builder:latest"
      - "--path=."

  - id: "Push Container Image"
    name: "gcr.io/cloud-builders/docker:latest"
    entrypoint: /bin/bash
    timeout: 60s
    args:
      - "-c"
      - |
        while ! docker push "$_GCR_HOSTNAME/$PROJECT_ID/$_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA"; do
          sleep 2
        done

  - id: "Deploy to Cloud Run"
    name: "gcr.io/cloud-builders/gcloud:latest"
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        gcloud run deploy ${_SERVICE_NAME}-$BUILD_ID \
          --image $_GCR_HOSTNAME/$PROJECT_ID/$_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA \
          --region ${_DEPLOY_REGION} \
          --allow-unauthenticated

  - id: "Retrieve Service URL"
    name: "gcr.io/cloud-builders/gcloud:latest"
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        set -e
        source /workspace/src/test/resources/common.sh
        echo $(get_url ${BUILD_ID}) > _service_url
        echo "Cloud Run URL for ${_SERVICE_NAME}-$BUILD_ID is $(cat _service_url)"
        echo $(get_idtoken) > _id_token
    env:
      - "_SERVICE_NAME=${_SERVICE_NAME}"
      - "_DEPLOY_REGION=${_DEPLOY_REGION}"
      - "PROJECT_ID=${PROJECT_ID}"

  - id: "Run System Tests"
    name: maven:3-openjdk-17
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        export BASE_URL=$(cat _service_url)
        export ID_TOKEN=$(cat _id_token)
        mvn failsafe:integration-test failsafe:verify

  # Clean up system test resources
  - id: "Delete image and service"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "/bin/bash"
    args:
      - "-c"
      - |
        gcloud artifacts docker images delete $_GCR_HOSTNAME/$PROJECT_ID/$_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA --quiet
        gcloud run services delete ${_SERVICE_NAME}-$BUILD_ID --region ${_DEPLOY_REGION} --quiet

substitutions:
  _GCR_HOSTNAME: asia-east1-docker.pkg.dev
  _SERVICE_NAME: poc-gcp-rest-get
  _DEPLOY_REGION: asia-east1
  _REPOSITORY: poc-artifact-repo
options:
  logging: CLOUD_LOGGING_ONLY






#steps:
#  - name: 'gcr.io/cloud-builders/mvn'
#    args: [ 'install' ]
#artifacts:
#  mavenArtifacts:
#    - repository: 'https://asia-east1-maven.pkg.dev/theta-ocean-427217-h5/poc-artifact-repo'
#      path: 'https://asia-east1-maven.pkg.dev/theta-ocean-427217-h5/poc-artifact-repo'
#      artifactId: 'poc-artifact-repo'
#      groupId: 'com.deep.poc'
#      version: '0.0.1-SNAPSHOT'
#options:
#  logging: CLOUD_LOGGING_ONLY




#steps:
#  # Build the container image
#  - name: 'gcr.io/cloud-builders/docker'
#    args: ['build', '-t', 'gcr.io/$PROJECT_ID/poc-gcp-rest-get-1.0.0', '.']
#  # Push the container image to Container Registry
#  - name: 'gcr.io/cloud-builders/docker'
#    args: ['push', 'gcr.io/$PROJECT_ID/poc-gcp-rest-get-1.0.0']
#  # Deploy container image to Cloud Run
#  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#    entrypoint: gcloud
#    args: ['run', 'deploy', 'SERVICE_NAME', '--image', 'gcr.io/$PROJECT_ID/poc-gcp-rest-get-1.0.0', '--region', 'asia-east1']
#images:
#  - gcr.io/$PROJECT_ID/poc-gcp-rest-get-1.0.0
#options:
#  logging: CLOUD_LOGGING_ONLY


#steps:
#  # Build the container image
#  - name: 'gcr.io/cloud-builders/docker'
#    args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/poc-gcp-rest-get:$COMMIT_SHA', '.' ]
#  # Push the container image to Container Registry
#  - name: 'gcr.io/cloud-builders/docker'
#    args: [ 'push', 'gcr.io/$PROJECT_ID/poc-gcp-rest-get:$COMMIT_SHA' ]
#  # Deploy container image to Cloud Run
#  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#    entrypoint: gcloud
#    args:
#      - 'run'
#      - 'deploy'
#      - 'poc-gcp-rest-get'
#      - '--image'
#      - 'gcr.io/$PROJECT_ID/poc-gcp-rest-get:$COMMIT_SHA'
#      - '--region'
#      - 'asia-east1'
#images:
#  - 'gcr.io/$PROJECT_ID/poc-gcp-rest-get:$COMMIT_SHA'
#options:
#  logging: CLOUD_LOGGING_ONLY

#steps:
#  - name: 'gcr.io/cloud-builders/mvn'
#    args: [ 'install' ]
#  - name: 'gcr.io/cloud-builders/docker'
#    args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/poc-gcp-rest-get', '.' ]
#  - name: 'gcr.io/cloud-builders/docker'
#    args: [ 'push', 'gcr.io/$PROJECT_ID/poc-gcp-rest-get' ]
#images: [ 'gcr.io/$PROJECT_ID/poc-gcp-rest-get' ]
#options:
#  logging: CLOUD_LOGGING_ONLY

#steps:
#  - name: 'gcr.io/cloud-builders/mvn'
#    args: [ 'install' ]
#  # Build the container image
#  - name: 'gcr.io/cloud-builders/docker'
#    args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/poc-gcp-rest-get', '.' ]
#  # Push the container image to Container Registry
#  - name: 'gcr.io/cloud-builders/docker'
#    args: [ 'push', 'gcr.io/$PROJECT_ID/poc-gcp-rest-get' ]
#  # Deploy container image to Cloud Run
#  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#    entrypoint: gcloud
#    args:
#      - 'run'
#      - 'deploy'
#      - 'SERVICE_NAME'
#      - '--image'
#      - 'gcr.io/$PROJECT_ID/poc-gcp-rest-get'
#      - '--region'
#      - 'asia-east1'
#images:
#  - 'gcr.io/$PROJECT_ID/poc-gcp-rest-get'
#options:
#  logging: CLOUD_LOGGING_ONLY

#steps:
#  - name: 'gcr.io/cloud-builders/mvn'
#    args: ['install']
#  - name: 'gcr.io/cloud-builders/docker'
#    args: [ 'build', '-t', 'asia-east1-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}', '.' ]
#images: ['gcr.io/$PROJECT_ID/poc-gcp-rest-get']
#options:
#  logging: CLOUD_LOGGING_ONLY
